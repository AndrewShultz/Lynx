;; .emacs



;;; uncomment this line to disable loading of "default.el" at startup
;; (setq inhibit-default-init t)

;; turn on font-lock mode
(when (fboundp 'global-font-lock-mode)
(global-font-lock-mode t))

;; enable visual feedback on selections
;(setq transient-mark-mode t)

;; default to better frame titles
(setq frame-title-format
(concat  "%b - emacs@" (system-name)))

;; default to unified diffs
(setq diff-switches "-u")




(custom-set-faces                                                                                
;; custom-set-faces was added by Custom.                                       
;; If you edit it by hand, you could mess it up, so be careful.                
;; Your init file should contain only one such instance.                       
;; If there is more than one, they won't work right.                           
'(default ((t (:inherit nil :stipple nil :background "color-16" :foreground "color-216" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))  
'(border ((t (:background "black" :foreground "white"))))
'(menu ((((type x-toolkit)) (:background "color-16" :foreground "color-198"))))
'(mode-line ((((class color) (min-colors 88)) (:background "color-161" :foreground "color-16" :box (:line-width -1 :style released-button)))))
'(region ((((class color) (min-colors 88) (background dark)) (:background "darkolivegreen"))))
'(scroll-bar ((t (:background "black" :foreground "white"))))

;; find faces with M-x list-faces-display
`(font-lock-variable-name-face ((t (:foreground "color-226")))) ;; variable definition
'(font-lock-constant-face ((t (:foreground "color-121")))) ;; true/false
'(font-lock-function-name-face ((t (:foreground "color-37")))) ;; function name
'(font-lock-keyword-face ((t (:foreground "color-32")))) ;; if/return/const/else/while
;;'(font-lock-preprocessor-face ((t (:foreground "color-121")))) ;;include
'(font-lock-preprocessor-face ((t (:foreground "color-130")))) ;;include
'(font-lock-type-face ((t (:foreground "color-82")))) ;; types (ex: double or TH1)
'(font-lock-comment-face ((t (:foreground "color-196")))) ;; comments
'(font-lock-string-face ((t (:foreground "color-147")))) ;; strings
'(sh-quoted-exec ((t (:foreground "color-51")))) ;; command string in bash, ie `cmd`

'(tool-bar ((default (:background "black" :foreground "white" :box (:line-width 1 :style released-button))) (((type x w32 ns) (class color)) (:background "grey75")))))

;; always end a file with a newline
;(setq require-final-newline 'query)

;disable backup
(setq backup-inhibited t)
;disable auto save
(setq auto-save-default nil)




;; ALLOW switching buffers using Alt-left/right (M-left/right)                                                                       
                                                                                                                                     
(defun xah-user-buffer-q ()                                                                                                          
  "Return t if current buffer is a user buffer, else nil.                                                                            
Typically, if buffer name starts with *, it's not considered a user buffer.                                                          
This function is used by buffer switching command and close buffer command, so that next buffer shown is a user buffer.              
You can override this function to get your idea of “user buffer”.                                                                    
version 2016-06-18"                                                                                                                  
  (interactive)                                                                                                                      
  (if (string-equal "*" (substring (buffer-name) 0 1))                                                                               
      nil                                                                                                                            
    (if (string-equal major-mode "dired-mode")                                                                                       
        nil                                                                                                                          
      t                                                                                                                              
      )))                                                                                                                            
                                                                                                                                     
(defun xah-next-user-buffer ()                                                                                                       
  "Switch to the next user buffer.                                                                                                   
“user buffer” is determined by `xah-user-buffer-q'.                                                                                  
URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'                                                                    
Version 2016-06-19"                                                                                                                  
  (interactive)                                                                                                                      
  (next-buffer)                                                                                                                      
  (let ((i 0))                                                                                                                       
    (while (< i 20)
      (if (not (xah-user-buffer-q))                                                                                                  
          (progn (next-buffer)                                                                                                       
                 (setq i (1+ i)))                                                                                                    
        (progn (setq i 100))))))                                                                                                     
                                                                                                                                     
(defun xah-previous-user-buffer ()                                                                                                   
  "Switch to the previous user buffer.                                                                                               
“user buffer” is determined by `xah-user-buffer-q'.                                                                                  
URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'                                                                    
Version 2016-06-19"                                                                                                                  
  (interactive)                                                                                                                      
  (previous-buffer)                                                                                                                  
  (let ((i 0))                                                                                                                       
    (while (< i 20)                                                                                                                  
      (if (not (xah-user-buffer-q))                                                                                                  
          (progn (previous-buffer)                                                                                                   
                 (setq i (1+ i)))                                                                                                    
        (progn (setq i 100))))))                                                                                                     
                                                                                                                                     
                                                                                                                                     
(global-set-key (kbd "<M-left>") 'xah-previous-user-buffer)                                                                          
(global-set-key (kbd "<M-right>") 'xah-next-user-buffer)
(global-set-key (kbd "<M-up>") (quote undo))                                                                          



;; KILL ALL NATTY BUFFERS                                                                                                            
;; Makes *scratch* empty.                                                                                                            
(setq initial-scratch-message "")                                                                                                    
                                                                                                                                     
;; Removes *scratch* from buffer after the mode has been set.                                                                        
(defun remove-scratch-buffer ()                                                                                                      
  (if (get-buffer "*scratch*")                                                                                                       
      (kill-buffer "*scratch*")))                                                                                                    
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)                                                                      
                                                                                                                                     
;; Removes *messages* from the buffer.                                                                                               
(setq-default message-log-max nil)                                                                                                   
(kill-buffer "*Messages*")                                                                                                           
                                                                                                                                     
;; Removes *Completions* from buffer after you've opened a file.                                                                     
(add-hook 'minibuffer-exit-hook                                                                                                      
      '(lambda ()                                                                                                                    
         (let ((buffer "*Completions*"))                                                                                             
           (and (get-buffer buffer)                                                                                                  
                (kill-buffer buffer)))))                                                                                             
                                                                                                                                     
;; Don't show *Buffer list* when opening multiple files at the same time.                                                            
(setq inhibit-startup-buffer-menu t)

;; Show only one active window when opening multiple files at the same time.
(add-hook 'window-setup-hook 'delete-other-windows)





(setq compilation-ask-about-save nil) ;; don't ask to save when compiling, do it auto.
(setq compilation-read-command nil) ;; Don't require a push of the enter key to compile.
(global-set-key (kbd "<f5>") 'compile)

(require 'compile)
(add-hook 'c++-mode-hook
	  (lambda ()
	    (set (make-local-variable 'compile-command)
		 (let ((file (file-name-nondirectory buffer-file-name)))
		   (format "%s %s %s -o %s %s"
			   (or (getenv "C++") "g++")
			   (or (getenv "CPPFLAGS")  "-std=c++0x")file
			   (file-name-sans-extension file)
			   ;;(or (getenv "CFLAGS") "`root-config --cflags --glibs --libs` `clhep-config --libs` -lgpib")
			   ;;)))))

			   (or (getenv "CFLAGS") "`root-config --cflags --glibs --libs`  -lgpib -lAnitaAnalysis -lAnitaAnalysisTools -lAnitaCorrelator -lAnitaEvent -lAnitaMagicDisplay -lUCorrelator -lRootFftwWrapper -lRadioScatter")
			    )))))



;; close the compilation window if
  ;; there was no error at all.
  (defun compilation-exit-autoclose (status code msg)
    ;; If M-x compile exists with a 0
    (when (and (eq status 'exit) (zerop code))
      ;; then bury the *compilation* buffer, so that C-x b doesn't go there
;;      (bury-buffer)
      ;; and delete the *compilation* window
      (delete-window (get-buffer-window (get-buffer "*compilation*"))))
    ;; Always return the anticipated result of compilation-exit-message-function
    (cons msg code))
  ;; Specify my function (maybe I should have done a lambda function)
  (setq compilation-exit-message-function 'compilation-exit-autoclose)



;; Insert for loop with F9
(defun ins-c++-curly ()
  "Insert {}."
  (interactive)
  (setq x (read-string "Loop variable?"))
  (insert "\nfor(int "x"=0; "x"<; "x"++) {\n\n\n\n}\n\n")
  (backward-char)
  (backward-char)
  (backward-char)
  (backward-char)
  (backward-char)
)  
(global-set-key (kbd "<f9>") 'ins-c++-curly)


;; Auto indent and delete trailing white space with F8
(defun autoindent ()
(interactive)
  (indent-region (point-min) (point-max))
  (delete-trailing-whitespace)
  (save-buffer)
)
(global-set-key (kbd "<f8>") 'autoindent)

